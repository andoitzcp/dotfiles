% LEEME:
%
% Este archivo lo he creado en el matlab online,
% y no me esta dejando guardarlo en local.
% He copiado y pegado el codigo a este archivo,
% no se si ejecutara, ya que puede que matlab agregue cierto formato a la hora
% de guardar el codigo fuente.
% En caso de no funcionar, por favor, copiar el codigo y pegarlo dentro de su
% editor.

function Lab1_ACampo

    fprintf('INICIO DEL PROGRAMA: INTRODUZCA VARIABLES\n');
    n = input('valor de n: ');
    r = input('valor de r: ');
    reps = input('vector de repeticiones(Por ejemplo [3,2,2]): ');

    out = variation(n, r);
    fprintf("V(n,r) = %i\n", out)

    out = variation_with_reps(n, r);
    fprintf("VR(n,r) = %i\n", out)

    out = permutation(n);
    fprintf("P(n) = %i\n", out)

    out = permutation_with_reps(n, reps);
    fprintf("PR(n,r) = %i\n", out)

    out = combination(n,r);
    fprintf("C(n,r) = %i\n", out)

    out = combination_with_reps(n, r);
    fprintf("CR(n,r) = %i\n", out)
end


% Esta funcion toma un rango de numeros enteros
% y devuelve la multiplicacion de cada uno de ellos
% P.E: [9,4] = 9 x 8 x 7 x 6 x 5 x 4
function ret = keep_multiplying_until (upr, lwr)
    i = upr - 1;
    while i > lwr
        upr = upr * i;
        i = i - 1;
    end
    ret = upr;
end

% Esta funcion toma una cantidad de elementos y el orden de estos
% y devuelve el numero de variaciones posibles que existen.
function out = variation (n, r)
    upr = n;
    lwr = n - r;
    out = keep_multiplying_until(upr,lwr);
end

% Esta funcion toma una cantidad de elementos y el orden de estos
% y devuelve el numero de variaciones con repeticion posibles que existen.
function out = variation_with_reps(n, r)
    out = n^r;
end

% Esta funcion toma una cantidad de elemetos,
% y devuelve el numero de permutaciones posibles.
function out = permutation (n)
    upr = n;
    lwr = 1;
    out = keep_multiplying_until(upr,lwr);
end

% Esta funcion toma una cantidad de elementos, y un vector con las
% repeticiones que ocurren en la lista de elementos.
% Devuelve el numero de permutaciones con repeticion posibles.
function out = permutation_with_reps(n, reps)
    upr = n;
    m = max(reps); % para optimizar calculos se obtine el maximo del vector recibido.
    out = keep_multiplying_until(upr,m);
    c = sum(reps(:) == m); % se cuenta la cantidad de veces que ocurre m
    out = out / (permutation(m))^(c-1); %se divide por m! considerandeo que ya se ha dividido una vez
    reps = reps(reps~=max(reps)); % se eliminan los valores = m del vector
    while length(reps) > 0 % el proceso se repite hasta que el vector quede vacio
        m = max(reps);
        c = sum(reps(:) == m);
        out = out / (permutation(m))^c; % se divide el resultado por el maximo del vector elevado a las ocurrencias de este.
        reps = reps(reps~=max(reps)); % se eliminal los valores - m del vector
    end
end

% Esta funcion toma una cantidad de elementos y el orden de estos
% y devuelve el numero de combinaciones posibles que existen.
function out = combination(n,r)
    v = variation(n,r);
    p = permutation(r);
    out = v / p;
end

% Esta funcion toma una cantidad de elementos y el orden de estos
% y devuelve el numero de combinaciones con repeticion posibles que existen.
function out = combination_with_reps(n,r)
    v = variation(n+r-1,r);
    p = permutation(r);
    out = v / p;
end
