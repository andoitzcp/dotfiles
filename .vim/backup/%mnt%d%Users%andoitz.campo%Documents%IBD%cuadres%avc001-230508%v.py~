import pandas as pd
from alive_progress import alive_bar

# Path to files root directory
path = '/mnt/d/Users/andoitz.campo/Documents/IBD/cuadres/avc001-230508/'

# Exported CSV list to be read
dict_xprt = {'p': 'export_sap_zlipt.csv',
            'p_prps': 'export_sap_prps.csv',
            'p_bpja': 'export_sap_bpja.csv',
            'c': 'export_sac.csv'}

# CSV list of filter to be applied
dict_fltr = {'drop_tbpkf': 'export_sap_tbpkf.csv'}

# Test definitions
dict_test = {'Version': {},
             'Version_Sujeta_a_CD':{},
             'Control_de_Disponibilidad':{},
             'Dispuesto':{},
             'Disponible':{}}

# Agroupations
groups = ['COMPANY', 'CECO', 'BAREA', 'PEP']

# Data types specifications
datatypes = {'COMPANY': str,
          'CECO': str,
          'RCLASS': str,
          'BAREA': str,
          'PEP': str,
          'NOBJ': str,
          'ORDER': str,
          'D': float,
          'DC': float,
          'ENE': float,
          'FEB': float,
          'MAR': float,
          'ABR': float,
          'MAY': float,
          'JUN': float,
          'JUL': float,
          'AGO': float,
          'SEP': float,
          'OCT': float,
          'NOV': float,
          'DIC': float,
          'CTEST1': float,
          'CTEST2': float,
          'CTEST3': float,
          'CTEST4': float,
          'CTEST5': float}

dict_dfs = {}
# Function that reads the handled CSV files.
def ft_readfiles(path, dict_xprt, dict_fltr, datatypes):
    n = len(dict_xprt) + len(dict_fltr)
    print("Reading CSV exported files")
    with alive_bar(n, bar='classic2', spinner='twirls') as bar:
        for key in dict_xprt:
            d = path + dict_xprt[key]
            df = pd.read_csv(d, sep=";", decimal=",", dtype=datatypes)
            dict_dfs[key] = df
            print(key, " readed. File name:", dict_xprt[key])
            bar()
        for key in dict_fltr:
            d = path + dict_fltr[key]
            df = pd.read_csv(d, sep=";", dtype=datatypes)
            dict_dfs[key] = df
            print(key, " readed. File name:", dict_fltr[key])
            bar()

def ft_joindfs(left_df, right_df, key, how):
    with alive_bar(1, bar=None, spinner='twirls') as bar:
        p = pd.merge(dict_dfs[left_df],
                     dict_dfs[right_df],
                     on=key,
                     how=how,
                     suffixes=('', '_DROP')).filter(regex='^(?!.*_DROP)')
        tmp_dict = {left_df: p}
        dict_dfs.update(tmp_dict)
        print(left_df, 'and', right_df, 'joined at', key, 'as', how)
        bar()

def ft_droplmnts(main_dfn, drop_dfn):
    with alive_bar(1, bar=None, spinner='twirls') as bar:
        tmp_mdf = dict_dfs[main_dfn].copy()
        tmp_ddf = dict_dfs[drop_dfn].copy()
        header = list(tmp_ddf.columns.values).pop(0)
        main_df = tmp_mdf[~tmp_mdf[header].isin(tmp_ddf[header])]
        del tmp_mdf, tmp_ddf
        dict_dfs.update({main_dfn: main_df})
        print('Listed', header, 'droped.')
        bar()

def ft_utest(test, tmp_dfp, src_dfc, fp, fc):
    cols_p = groups.copy()
    cols_p.append(fp)
    cols_c = groups.copy()
    cols_c.append(fc)
    dfp = tmp_dfp.copy()
    dfp = tmp_dfp.loc[:, cols_p]
    dfc = src_dfc.copy()
    dfc = src_dfc.loc[:, cols_c]
    dict_test[test].update({'p': dfp})
    dict_test[test].update({'c': dfc})
    dict_test[test].update({'fp': fp})
    dict_test[test].update({'fc': fc})
    del tmp_dfp

def ft_dfcmp():
    n = len(dict_test) * len(groups)
    with alive_bar(n, bar='classic2', spinner='twirls') as bar:
        for test in dict_test:
            print(f'\t {test}.\n')
            for group in groups:
                out_name = './out/' + test + group + '.csv'
                tmp_dict = dict_test[test]
                tmp_dfc = tmp_dict['c'].groupby(group).sum(numeric_only=True).reset_index()
                tmp_dfp = tmp_dict['p'].groupby(group).sum(numeric_only=True).reset_index()
                cmp = pd.merge(tmp_dfp,
                               tmp_dfc,
                               on=group,
                               how='left')
                cmp['DIFF'] = cmp[tmp_dict['fc']] - cmp[tmp_dict['fp']]
                tot_rows = cmp['DIFF'].count()
                ok_rows = cmp.loc[cmp['DIFF'].abs() < 1, 'DIFF'].count()
                if ok_rows == tot_rows:
                    isok = '\033[92m[OK]\033[0m'
                else:
                    isok = '\033[91m[NOK]\033[0m'
                cmp.to_csv(out_name)
                print(f'\t\t {group}: {ok_rows}/{tot_rows}\t{isok}\n')
                del cmp, tmp_dfc, tmp_dfp
                bar()

### Script instructions starts here ###
ft_readfiles(path, dict_xprt, dict_fltr, datatypes) # Reads CSVs
#dict_dfs['p']['ORDER'] = dict_dfs['p']['ORDER'].str.lstrip('0')
ft_joindfs('p', 'p_prps', 'PEP', 'left') # joins tables
ft_joindfs('p', 'p_bpja', 'NOBJ', 'left') # joins tables
#ft_droplmnts('p', 'drop_tbpkf') # Drop TBPKF orders 
#ft_droplmnts('p', 'drop_cebe') # Drops CEBEs
#ft_droplmnts('p_qty', 'drop_ceco') # Drops CECOs
#ft_droplmnts('p_qty', 'drop_cebe') # Drops CEBEs

#Transformations
# TEST 1: Version 
tmp_df = dict_dfs['p'].copy()
tmp_df.to_csv('out.csv')
tmp_df['P'] = tmp_df.loc[tmp_df['RCLASS'] == '1', 'ENE':'DIC'].sum(axis=1)
ft_utest('Version', tmp_df, dict_dfs['c'], 'P', 'CTEST1')

# TEST 2: Version Sujeta a CD 
tmp_df = dict_dfs['p'].copy()
tmp_df = tmp_df[~tmp_df['ORDER'].isin(dict_dfs['drop_tbpkf']['ORDER'])]
tmp_df['P'] = tmp_df.loc[tmp_df['RCLASS'] == '1', 'ENE':'DIC'].sum(axis=1)
ft_utest('Version_Sujeta_a_CD', tmp_df, dict_dfs['c'], 'P', 'CTEST2')

# TEST 3: Control de Disponibilidad
tmp_df = dict_dfs['p'].copy()
#tmp_df = tmp_df[~tmp_df['ORDER'].isin(dict_dfs['drop_tbpkf']['ORDER'])]
tmp_df = tmp_df.loc[tmp_df['RCLASS'] == '1']
ft_utest('Control_de_Disponibilidad', tmp_df, dict_dfs['c'], 'DC', 'CTEST3')

# TEST 4: Dispuesto
tmp_df = dict_dfs['p'].copy()
#tmp_df = tmp_df[~tmp_df['ORDER'].isin(dict_dfs['drop_tbpkf']['ORDER'])]
tmp_df = tmp_df.loc[tmp_df['RCLASS'] == '1']
ft_utest('Dispuesto', tmp_df, dict_dfs['c'], 'D', 'CTEST4')

# TEST 5: Disponible
tmp_df = dict_dfs['p'].copy()
tmp_df = tmp_df[~tmp_df['ORDER'].isin(dict_dfs['drop_tbpkf']['ORDER'])]
tmp_df = tmp_df.loc[tmp_df['RCLASS'] == '1']
tmp_df['P'] = tmp_df['DC'] - tmp_df['D']
ft_utest('Disponible', tmp_df, dict_dfs['c'], 'P', 'CTEST5')

#print(dict_test)
ft_dfcmp()
